android {
    apply from: 'signingConfigs.gradle', to: android

    android.applicationVariants.all { variant ->
        kotlin.sourceSets {
            def name = variant.name
            getByName(name) {
                kotlin.srcDir("build/generated/ksp/$name/kotlin")
            }
        }
    }
//→ signingConfigs.gradle
//    signingConfigs {
//        //TODO: Should be Change(storePassword,keyAlias,keyPassword) later?
//        develop {
//            storeFile file("")
//            storePassword ""
//            keyAlias "develop"
//            keyPassword ""
//        }
//
//        staging {
//            storeFile file("")
//            storePassword ""
//            keyAlias "staging"
//            keyPassword ""
//        }
//        release {
//            storeFile file("")
//            storePassword ""
//            keyAlias "production"
//            keyPassword ""
//        }
//    }
flavorDimensions 'sourceSet'
    productFlavors {
        develop {
            signingConfig signingConfigs.develop
//            buildConfigField 'String', 'CLIENT_ID', '""' //TODO: Set these later
//            buildConfigField 'String', 'CLIENT_SECRET', '""'
            dimension 'sourceSet'
            applicationIdSuffix '.develop'
            versionNameSuffix "-develop"
            manifestPlaceholders = [appLabel: "@string/app_name"]
            //ApiBaseUrl
//            buildConfigField 'String', 'BASE_URL',"\"https://www.google.com/\""
        }
        staging {
            signingConfig signingConfigs.staging
//            buildConfigField 'String', 'CLIENT_ID', '""' //TODO: Set these later
//            buildConfigField 'String', 'CLIENT_SECRET', '""'
            dimension 'sourceSet'
            applicationIdSuffix '.staging'
            versionNameSuffix "-staging"
            manifestPlaceholders = [appLabel: "@string/app_name"]
            //ApiBaseUrl
//            buildConfigField 'String', 'BASE_URL',"\"https://www.google.com/\""
        }
        production {
            signingConfig signingConfigs.production
//            buildConfigField 'String', 'CLIENT_ID', '""' //TODO: Set these later
//            buildConfigField 'String', 'CLIENT_SECRET', '""'
            dimension 'sourceSet'
            //versionNameSuffix "-production"
            manifestPlaceholders = [appLabel: "@string/app_name"]
            //ApiBaseUrl
//            buildConfigField 'String', 'BASE_URL',"\"https://www.google.com/\"" //You can Use buildConfigField for another dynamic build url
        }
    }

    buildTypes {
        debug{
            minifyEnabled false
            debuggable true
            manifestPlaceholders = [appLabel: "@string/app_name"]
            versionNameSuffix "-debug"
        }
        // リリース
        release {
            //TODO: Set up proguard etc later?
            minifyEnabled true
            debuggable false
            manifestPlaceholders = [appLabel: "@string/app_name"]
            versionNameSuffix "-release"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }
}